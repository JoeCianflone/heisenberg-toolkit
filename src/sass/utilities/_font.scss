/// Designers working in any program are going to be working with fonts in pixels
/// and this can cause a little some issues for developers who want to be coding
/// in REMs/EMs. This mixin will convert a font from one unit type to another.
/// Your designers can continue to work in pixels and you can too, but you'll
/// have the benefit of having everything converted to a non-fixed unit.
///
/// @param  String|Number $font-size               the font size that you want
/// @param  String        $to-unit:           rem  the unit you want to convert to
/// @param  String        $from-unit: px   default unit we're going to convert from (if you don't set it)
///
/// @example
///    @include  font-size(22px);
///    Result
///    font-size: 22px; // generates a fallback for rems
///    font-size: 2.2rem
///
/// @example
///    @include  font-size(22em, 'px');
///    Result:
///    font-size: 22px;
@mixin font-size($font-size, $to-unit: rem, $from-unit: px) {
   $current-unit: unit($font-size);
   $current-value: get-value($font-size);

   @if $current-unit == '' {
      $current-unit: $from-unit;
   }

   @if $current-unit == 'px' {
      @if $to-unit == 'rem' {
         font-size: unquote(($current-value) + px);
         font-size: unquote(($current-value / 10) + $to-unit);
      } @else if $to-unit == 'em' {
         font-size: unquote(($current-value / 10) + $to-unit);
      }
   } @else if $current-unit == 'rem' or $current-unit == 'em' {
      @if $to-unit == 'px' {
         font-size: unquote(($current-value * 10) + px);
      } @else {
         font-size: unquote(($current-value) + $to-unit);
      }
   }
}

 /// Bringing in fonts that you need to load from your own server isn't difficult
 /// but it has a bit of tedium to it. If you need to bring in a bunch of fonts
 /// then it's easier to use this mixin.
 /// @param  String $font-family                      Name of the font
 /// @param  String $font-file-name:    false         If the name of the font differs from the name of the familiy
 /// @param  String|Number $weight:     normal        Font weight
 /// @param  String $style:             normal        Font style
 /// @param  String $otf:               false         If you aren't using a TTF, but OTF set to true
@mixin font-face($font-family, $font-file-name: false, $weight: normal, $style: normal, $otf: false) {
   @font-face {
      $font: $font-family;
      $ottf: ttf;
      $ottf-format: truetype;

      @if $font-file-name {
         $font: $font-file-name;
      }

      @if $otf {
         $ottf: otf;
         $ottf-format: OpenType;
      }

      font: {
         family: $font-family;
         style: $style;
         weight: $weight;
      }

      src: font-url('#{$font}.eot');
      src: font-url('#{$font}.eot?#iefix')          format('embedded-opentype'),
      font-url('#{$font}.woff')                     format('woff'),
      font-url('#{$font}.#{$ottf}')                 format('#{$ottf-format}'),
      font-url('#{$font}.svg##{$font-family}')      format('svg');
   }
}
