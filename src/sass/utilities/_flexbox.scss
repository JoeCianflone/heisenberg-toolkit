@function _getOpt($key, $overrides: ()) {
   @if (map-has-key($overrides, $key)) {
      @return map-get($overrides, $key);
   }

   @return map-get($_fOpts, $key);
}

@mixin flex-init($options: ()) {
   $__flexDefaults__: (
      wrap:            nowrap,
      columns:         12,
      direction:       row,
      align-items:     flex-start,
      gutter-type:     split,
      gutter-width:    0.25,
      gutter-position: none,
      align-content:   flex-start,
      justify-content: flex-start,
      order:           0,
      flex-grow:       0,
      flex-shrink:     0,
      align-self:      stretch,
      position:        first,
   );
   $_fOpts: map-merge($__flexDefaults__, $options) !global;
   $singleCellWidth: 100 / _getOpt(columns) !global;
   $cellGutter:      _getOpt(gutter-width) * $singleCellWidth !global;
}

@function percent($x) {
   @return ($x * 1%);
}

@function _get-width($gutterOverride: false) {
   @if (_getOpt(gutter-type) != none and $gutterOverride == false) {
      @return percent($singleCellWidth - $cellGutter);
   }

   @return $singleCellWidth;
}

@mixin flex-wrapper($overrides: ()) {
   align-content:   _getOpt(align-content, $overrides);
   align-items:     _getOpt(align-items, $overrides);
   display:         flex;
   flex-direction:  _getOpt(direction, $overrides);
   flex-wrap:       _getOpt(wrap, $overrides);
   justify-content: _getOpt(justify-content, $overrides);
}

// TODO: this looks stupid, but it works, need to refactor...
@mixin _gutter-setup($overrides: ()) {
      @if (_getOpt(gutter-type, $overrides) == split) {
         @if (_getOpt(gutter-position, $overrides) == full) {
            margin:  percent($cellGutter/2);
            padding: percent($cellGutter/2);
         } @else if (_getOpt(gutter-position, $overrides) == top or _getOpt(gutter-position, $overrides) == bottom) {
            margin-#{_getOpt(gutter-position, $overrides)}:  percent($cellGutter/2);
            padding-#{_getOpt(gutter-position, $overrides)}:  percent($cellGutter/2);
            margin-left:   percent($cellGutter/2);
            margin-right:  percent($cellGutter/2);
            padding-left:  percent($cellGutter/2);
            padding-right: percent($cellGutter/2);
         } @else {
            margin-left:   percent($cellGutter/2);
            margin-right:  percent($cellGutter/2);
            padding-left:  percent($cellGutter/2);
            padding-right: percent($cellGutter/2);
         }

      }

      @if (_getOpt(gutter-override, $overrides) == inside) {
         @if (_getOpt(wrap-type, $overrides) == full) {
            padding: percent($cellGutter);
         } @else if (_getOpt(wrap-type, $overrides) == top) {
            padding-top: percent($cellGutter);
            padding-left:  percent($cellGutter);
            padding-right: percent($cellGutter);
         } @else if (_getOpt(wrap-type, $overrides) == bottom) {
            padding-bottom: percent($cellGutter);
            padding-left:  percent($cellGutter);
            padding-right: percent($cellGutter);
         } @else {
            padding-left:  percent($cellGutter);
            padding-right: percent($cellGutter);
         }
      }

      @if (_getOpt(gutter-override, $overrides) == outside) {
         @if (_getOpt(wrap-type, $overrides) == full) {
            margin: percent($cellGutter);
         } @else if (_getOpt(wrap-type, $overrides) == top) {
            margin-top: percent($cellGutter);
            margin-left:  percent($cellGutter);
            margin-right: percent($cellGutter);
         } @else if (_getOpt(wrap-type, $overrides) == bottom) {
            margin-bottom: percent($cellGutter);
            margin-left:  percent($cellGutter);
            margin-right: percent($cellGutter);
         } @else {
            margin-left:  percent($cellGutter);
            margin-right: percent($cellGutter);
         }
      }
}

@mixin flex-cell($cols, $overrides: ()) {
   @include _gutter-setup($overrides);

   align-self: _getOpt(align-self, $overrides);
   flex:       _getOpt(flex-grow, $overrides) _getOpt(flex-shrink, $overrides) (_get-width() * $cols);
   @if (_getOpt(position, $overrides) == last) {
      margin-left: auto;
   }
   min-height: 100%;
   order:      _getOpt(order, $overrides);
}

@mixin flex-push($cols) {
   $gutter: $cellGutter;
   @if (_getOpt(gutter-type) == split) {
      $gutter: $cellGutter/2;
   }
   margin-left: percent((_get-width(true) * $cols) + $gutter);
}

@mixin flex-pull($cols) {
   $gutter: $cellGutter;
   @if (_getOpt(gutter-type) == split) {
      $gutter: $cellGutter/2;
   }

   margin-right: percent(_get-width(true) * $cols);
}

$flexMap: (
   columns: 12,
   gutter: 0.25,
   direction: row,
   wrap: nowrap,
   justify-content: flex-start,
);

$flexCellOptions: (
   order: 0,
   flex-grow: 0,
   flex-shrink: 0,
   align-self: stretch,
);

@mixin flex-init($options: ()) {
   $flexOptions: merge($flexOptions, $options);
}

@function merge($list1, $list2) {
   @return map-merge($list1, $list2);
}

@function opt($option) {
   @return map-get($flexOptions, $option);
}

@function cell-opt($option) {
   @return map-get($flexCellOptions, $option);
}

@function width-setup($gutter) {
   @if (opt(gutter-type) != none) {
      @return ($width - $gutter) * 1%;
   }

   @return ($width) * 1%;
}

@mixin flex-wrapper() {
   display: flex;
   flex-direction: opt(direction);
   flex-wrap: opt(wrap);
   justify-content: opt(justify-content);
   align-items: opt(align-items);
   align-content: opt(align-content);
}

@mixin gutter-setup($gutter) {
   @if (opt(gutter-type) !== none) {

      @if (opt(gutter-type) == split) {
         margin-left:   $gutter/2 * 1%;
         margin-right:  $gutter/2 * 1%;
         padding-left:  $gutter/2 * 1%;
         padding-right: $gutter/2 * 1%;
      }

      @if (opt(gutter-type) == inside) {
         padding-left: $gutter * 1%;
         padding-right: $gutter * 1%;
      }

      @if (opt(gutter-type) == outside) {
         margin-left: $gutter * 1%;
         margin-right: $gutter * 1%;
      }
   }
}

@mixin flex-cell($cols, $cell-options: ()) {

   $width: (100 * $cols) / opt(columns);
   $gutter: (opt(gutter-width) * ((100 * 1)/opt(columns)));

   @include gutter-setup($gutter);

   $cell-width: width-setup($gutter);

   order: cell-opt(order);
   flex: cell-opt(flex-grow) cell-opt(flex-shrink) width-setup($gutter));
   align-self: cell-opt(align-self);
   min-height: 100%;
}
